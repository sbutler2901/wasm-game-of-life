{"version":3,"sources":["webpack:///./src/FPS.tsx","webpack:///./src/renderer.ts","webpack:///./src/StateBtns.tsx","webpack:///./src/CanvasAnimation.tsx","webpack:///./src/app.tsx","webpack:///../pkg/wasm_game_of_life_bg.js"],"names":["nowTimestamp","lastFrameTimeStamp","setLastFrameTimeStamp","frames","setFrames","latest","setLatest","mean","setMean","min","setMin","max","setMax","fps","push","length","shift","tmpMin","Infinity","tmpMax","sum","i","Math","tmpMean","round","id","UNIVERSE","new","U_WIDTH","width","height","draw","updateFPS","animationId","getIndex","row","column","renderLoop","performance","now","tick","requestAnimationFrame","clear","reset","startRender","pauseRender","cancelAnimationFrame","ToggleAnimationBtn","text","setText","onClick","isRenderPaused","StateBtns","CELL_SIZE","ctx","fillCell","col","fillRect","cellsPtr","cells","cellsChangedPtr","changed_cells","cellsChangedLength","changed_cells_length","Uint8Array","buffer","cellsChanged","Uint16Array","fillStyle","Alive","Dead","changed_cells_clear","drawCells","canvasClickHandler","event","boundingRect","getBoundingClientRect","scaleX","scaleY","canvasLeft","clientX","left","canvasTop","clientY","top","floor","altKey","insert_glider","shiftKey","insert_pulsar","toggle_cell","Canvas","preRenderCallback","canvas","canvasRef","getContext","ceil","init","current","animationDraw","animationUpdateFPS","initRenderer","className","ref","CanvasAnimation","timestamp","setTimestamp","render","Fragment","document","getElementById","heap","Array","fill","undefined","getObject","idx","heap_next","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","len","subarray","cachegetInt32Memory0","getInt32Memory0","Int32Array","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","Cell","Object","freeze","Universe","obj","create","prototype","this","__destroy_into_raw","__wrap","retptr","r0","r1","__wbindgen_object_drop_ref","arg0","__wbg_random_a582babfa4489c72","random","what","Error","__wbg_new_59cb74e423758ede","addHeapObject","__wbg_stack_558ba5917b466edd","arg1","ptr0","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","len0","__wbg_error_4bb6c2a97407129a","console","error","__wbindgen_throw"],"mappings":"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","file":"1.index.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport \"./FPS.scss\";\n\nexport const FPS = ({ nowTimestamp }: { nowTimestamp: number }) => {\n    const [lastFrameTimeStamp, setLastFrameTimeStamp] = useState(nowTimestamp);\n    const [frames, setFrames] = useState([]);\n    const [latest, setLatest] = useState(0);\n    const [mean, setMean] = useState(0);\n    const [min, setMin] = useState(0);\n    const [max, setMax] = useState(0);\n\n    useEffect(() => {\n        const delta = nowTimestamp - lastFrameTimeStamp;\n\n        const fps = 1 / delta * 1000;\n\n        // Save only the latest 100 timings.\n        frames.push(fps);\n        if (frames.length > 100) {\n            frames.shift();\n        }\n\n        // Find the max, min, and mean of our 100 latest timings.\n        let tmpMin = Infinity;\n        let tmpMax = -Infinity;\n        let sum = 0;\n        for (let i = 0; i < frames.length; i++) {\n            sum += frames[i];\n            tmpMin = Math.min(frames[i], tmpMin);\n            tmpMax = Math.max(frames[i], tmpMax);\n        }\n        let tmpMean = sum / frames.length;\n\n        if (tmpMean === Infinity) tmpMean = 0;\n        if (tmpMin === Infinity) tmpMin = 0;\n        if (tmpMax === Infinity) tmpMax = 0;\n\n        setLastFrameTimeStamp(nowTimestamp);\n        setFrames(frames);\n        setLatest(Math.round(fps));\n        setMean(Math.round(tmpMean));\n        setMin(Math.round(tmpMin));\n        setMax(Math.round(tmpMax));\n\n    }, [nowTimestamp]);\n\n    return (\n        <div id=\"fps\">\n            <h4>Frames per Second:</h4>\n            <p>latest: {latest}</p>\n            <p>mean of last 100: {mean}</p>\n            <p>min of last 100: {min}</p>\n            <p>max of last 100: {max}</p>\n        </div>\n    );\n};\n","import { Universe } from \"../../pkg/wasm_game_of_life\";\n\n//** Typings **//\n\nexport type CanvasPrerenderCallback = (nowTimestamp: number) => void;\n\n//** Universe **//\n\nexport const UNIVERSE = Universe.new();\nconst U_WIDTH = UNIVERSE.width();\nconst U_HEIGHT = UNIVERSE.height();\n\n//** Implementation specific functions **//\n\nlet draw: Function;\nlet updateFPS: CanvasPrerenderCallback;\n\n//** General **//\n\nlet animationId: number = null;\n\n//** Helper functions **//\n\nexport const getIndex = (row: number, column: number) => {\n    return row * U_WIDTH + column;\n};\n\n//** Rendering **//\n\nconst renderLoop = () => {\n    updateFPS(performance.now());\n\n    for (let i=0; i < 3; i++)\n        UNIVERSE.tick();\n\n    draw();\n\n    animationId = requestAnimationFrame(renderLoop);\n};\n\n// ** State functions **//\n\nexport const clear = () => {\n    UNIVERSE.clear();\n    draw();\n};\n\nexport const reset = () => {\n    UNIVERSE.reset();\n    draw();\n};\n\nexport const startRender = () => {\n    renderLoop();\n};\n\nexport const pauseRender = () => {\n    cancelAnimationFrame(animationId);\n    animationId = null;\n};\n\nexport const isRenderPaused = () => {\n    return animationId === null;\n};\n\n//** Initialization **//\n\nexport const initRenderer = (animationDraw: Function, animationUpdateFPS: CanvasPrerenderCallback) => {\n    draw = animationDraw;\n    updateFPS = animationUpdateFPS;\n};\n","import React, { useState } from \"react\";\nimport { clear, isRenderPaused, pauseRender, startRender, reset } from \"./renderer\";\n\nconst ToggleAnimationBtn = () => {\n    const [text, setText] = useState(\"⏸\");\n\n    const toggleRendering = () => {\n        if (!isRenderPaused()) {\n            setText(\"▶\");\n            pauseRender();\n        } else {\n            setText(\"⏸\");\n            startRender();\n        }\n    };\n\n    return (\n        <button id=\"play-pause\" onClick={toggleRendering}>{text}</button>\n    );\n};\n\nexport const StateBtns = () => {\n   return (\n       <div id={'state-btns'}>\n           <ToggleAnimationBtn/>\n           <button id=\"clear-btn\" onClick={clear}>Clear</button>\n           <button id=\"reset-btn\" onClick={reset}>Reset</button>\n       </div>\n   );\n};\n","import { memory } from \"wasm-game-of-life/wasm_game_of_life_bg.wasm\";\nimport { Cell } from \"wasm-game-of-life\";\nimport React, { MouseEvent, useEffect, useRef, useState } from \"react\";\nimport { FPS } from \"./FPS\";\nimport { StateBtns } from \"./StateBtns\";\nimport {\n    UNIVERSE,\n    startRender,\n    pauseRender,\n    getIndex,\n    initRenderer,\n    CanvasPrerenderCallback,\n} from \"./renderer\";\n\nimport \"./animation.scss\";\n\n//** Constants **//\n\nconst CANVAS_WIDTH: string = \"500px\";\nconst CANVAS_HEIGHT: string = \"500px\";\n\nlet CELL_SIZE = 5; // px\nconst GRID_COLOR = \"#CCCCCC\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\n\nconst U_WIDTH = UNIVERSE.width();\nconst U_HEIGHT = UNIVERSE.height();\n\n//** HTML Elements **//\n\nlet canvas: HTMLCanvasElement = null;\n\n//** General **//\n\nlet ctx: CanvasRenderingContext2D;\n\n//** Drawing Functions **//\n\n// Unoptimized cell drawing\nconst drawCellsBasic = () => {\n    const cellsPtr = UNIVERSE.cells();\n    const cells = new Uint8Array(memory.buffer, cellsPtr, U_WIDTH * U_HEIGHT);\n\n    ctx.beginPath();\n\n    for (let row = 0; row < U_HEIGHT; row++) {\n        for (let col = 0; col < U_WIDTH; col++) {\n            const idx = getIndex(row, col);\n\n            ctx.fillStyle = cells[idx] === Cell.Dead\n                ? DEAD_COLOR\n                : ALIVE_COLOR;\n\n            fillCell(row, col);\n        }\n    }\n\n    ctx.stroke();\n};\n\nconst fillCell = (row: number, col: number) => {\n    ctx.fillRect(\n        col * CELL_SIZE,\n        row * CELL_SIZE,\n        CELL_SIZE,\n        CELL_SIZE\n    );\n};\n\n// Draws cells using changed cells provided by universe with minimal canvas fill-style\nconst drawCells = () => {\n    const cellsPtr = UNIVERSE.cells();\n    const cellsChangedPtr = UNIVERSE.changed_cells();\n    const cellsChangedMultiplier = 2;\n    const cellsChangedLength = UNIVERSE.changed_cells_length() * cellsChangedMultiplier;\n    // directly access the WebAssembly's memory as a linear buffer\n    const cells = new Uint8Array(memory.buffer, cellsPtr, U_WIDTH * U_HEIGHT);\n    const cellsChanged = new Uint16Array(memory.buffer, cellsChangedPtr, cellsChangedLength);\n\n    // console.log(\"Changed_cells: \", universe.changed_cells_length());\n\n    // Alive cells.\n    ctx.fillStyle = ALIVE_COLOR;\n    for (let i=0; i < cellsChangedLength; i += cellsChangedMultiplier) {\n        const row = cellsChanged[i];\n        const col = cellsChanged[i+1];\n        const idx = getIndex(row, col);\n\n        if (cells[idx] !== Cell.Alive) continue;\n\n        fillCell(row, col);\n    }\n\n    // Dead cells.\n    ctx.fillStyle = DEAD_COLOR;\n    for (let i=0; i < cellsChangedLength; i += cellsChangedMultiplier) {\n        const row = cellsChanged[i];\n        const col = cellsChanged[i+1];\n        const idx = getIndex(row, col);\n\n        if (cells[idx] !== Cell.Dead) continue;\n\n        fillCell(row, col);\n    }\n\n    UNIVERSE.changed_cells_clear();\n};\n\n// Draws the game's grid\nconst drawGrid = () => {\n    ctx.beginPath();    // initializes a path to draw\n    ctx.strokeStyle = GRID_COLOR;\n\n    // Vertical lines.\n    for (let i = 0; i <= U_WIDTH; i++) {\n        // moves starting point across page without drawing for each cell\n        ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n        // draws line from starting point down page\n        ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * U_HEIGHT + 1);\n    }\n\n    // Horizontal lines.\n    for (let j = 0; j <= U_HEIGHT; j++) {\n        // moves starting point down page without drawing for each cell\n        ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\n        // draws line from starting point across page\n        ctx.lineTo((CELL_SIZE + 1) * U_WIDTH + 1, j * (CELL_SIZE + 1) + 1);\n    }\n\n    ctx.stroke();   // strokes (draws) paths\n};\n\nconst draw = () => {\n    // drawCellsBasic();\n    drawCells();\n    // drawGrid();\n};\n\n//** Event Listeners **/\n\nconst canvasClickHandler = (event: MouseEvent) => {\n    // Get the canvas coordinates within the browser window\n    const boundingRect = canvas.getBoundingClientRect();\n\n    const scaleX = canvas.width / boundingRect.width;\n    const scaleY = canvas.height / boundingRect.height;\n\n    // Determine click coordinates within the canvas\n    const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n    const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n    // Determine the cell clicked based on the canvas coordinates\n    const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), U_HEIGHT - 1);\n    const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), U_WIDTH - 1);\n\n    if (event.altKey) {\n        UNIVERSE.insert_glider(row, col);\n    } else if (event.shiftKey) {\n        UNIVERSE.insert_pulsar(row, col);\n    } else {\n        UNIVERSE.toggle_cell(row, col);\n    }\n\n    draw();\n};\n\n//** Initialization **//\n\nconst init = (canvasRef: HTMLCanvasElement) => {\n    canvas = canvasRef;\n    ctx = canvas.getContext('2d');\n    CELL_SIZE = Math.ceil(Math.min((canvas.width/U_WIDTH), (canvas.height/U_HEIGHT)));\n};\n\n//** Components **//\n\nconst Canvas = ({ preRenderCallback }: { preRenderCallback: CanvasPrerenderCallback }) => {\n    const canvas = useRef(null);\n\n    useEffect(() => {\n        init(canvas.current);\n        initRenderer(draw, preRenderCallback);\n        startRender();\n\n        return () => {\n            pauseRender();\n        };\n    }, []);\n\n    return (\n        <div className={'canvas-container'}>\n            <canvas\n                width={CANVAS_WIDTH}\n                height={CANVAS_HEIGHT}\n                ref={canvas}\n                onClick={canvasClickHandler}\n            />\n        </div>\n    );\n};\n\nexport const CanvasAnimation = () => {\n    const [timestamp, setTimestamp] = useState(performance.now());\n\n    return (\n        <div className={'animation-container'}>\n            <div>\n                <h3 className={'title'}>Canvas API</h3>\n                <StateBtns/>\n                <FPS nowTimestamp={timestamp}/>\n            </div>\n            <Canvas preRenderCallback={setTimestamp}/>\n        </div>\n    );\n};\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { CanvasAnimation } from \"./CanvasAnimation\";\n// import { WebglAnimation } from './WebglAnimation';\n\nimport './app.scss';\n\n//** Components\n\n// NOTE: Change animation component here\nconst App = () => {\n    return (\n        <React.Fragment>\n            <h1 className={'page-title'}>Conway's Game of Life</h1>\n            {/*<WebglAnimation/>*/}\n            <CanvasAnimation/>\n        </React.Fragment>\n    );\n};\n\n//*** INIT ***//\n\nReactDom.render(<App/>, document.getElementById(\"root\"));\n","import * as wasm from './wasm_game_of_life_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n*/\nexport const Cell = Object.freeze({ Dead:0,\"0\":\"Dead\",Alive:1,\"1\":\"Alive\", });\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    * Get width of the universe\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * Get height of the universe\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * Provides a pointer to the cells vector\n    * @returns {number}\n    */\n    cells() {\n        var ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Gets all changed cells\n    * @returns {number}\n    */\n    changed_cells() {\n        var ret = wasm.universe_changed_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Gets length of the cells that have changed\n    * @returns {number}\n    */\n    changed_cells_length() {\n        var ret = wasm.universe_changed_cells_length(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    changed_cells_clear() {\n        wasm.universe_changed_cells_clear(this.ptr);\n    }\n    /**\n    * Provides a JS method for toggling a cell\n    * @param {number} row\n    * @param {number} column\n    */\n    toggle_cell(row, column) {\n        wasm.universe_toggle_cell(this.ptr, row, column);\n    }\n    /**\n    * Creates a new Universe\n    * @returns {Universe}\n    */\n    static new() {\n        var ret = wasm.universe_new();\n        return Universe.__wrap(ret);\n    }\n    /**\n    * Resets the universe to a random initial state\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    * Sets all cells in the universe to dead\n    */\n    clear() {\n        wasm.universe_clear(this.ptr);\n    }\n    /**\n    * Renders a textual representation of the universe in its current state\n    * @returns {string}\n    */\n    render() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.universe_render(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Causes a state change for the universe according to the Game's rules\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * Inserts a glider around cell specified\n    * @param {number} row\n    * @param {number} column\n    */\n    insert_glider(row, column) {\n        wasm.universe_insert_glider(this.ptr, row, column);\n    }\n    /**\n    * Inserts a pulsar around cell specified\n    * @param {number} row\n    * @param {number} column\n    */\n    insert_pulsar(row, column) {\n        wasm.universe_insert_pulsar(this.ptr, row, column);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_random_a582babfa4489c72 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport function __wbg_new_59cb74e423758ede() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_558ba5917b466edd(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}